// Prisma schema for pHelper persistent storage
// See design/persistence-postgres.md for details
// Updated for Phase 4

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  passwordHash     String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  weights          WeightEntry[]
  workouts         Workout[]
  tasks            Task[]
  goals            Goal[]
  weightGoals      WeightGoal[]
  progressPhotos   ProgressPhoto[]
  bodyCompositions BodyComposition[]
  workoutTemplates WorkoutTemplate[]
  personalRecords  PersonalRecord[]
}

model WeightEntry {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  weight    Float
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workout {
  id         String           @id @default(uuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  date       DateTime
  type       String // Legacy field for backward compatibility
  duration   Int // Total duration in minutes
  notes      String?
  template   WorkoutTemplate? @relation(fields: [templateId], references: [id])
  templateId String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  exercises       WorkoutExercise[]
  personalRecords PersonalRecord[]

  @@index([userId])
  @@index([date])
  @@index([templateId])
}

model Task {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Goal {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String?
  target      Float
  current     Float        @default(0)
  unit        String
  category    GoalCategory
  status      GoalStatus   @default(ACTIVE)
  deadline    DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model WeightGoal {
  id          String            @id @default(uuid())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  goalWeight  Float
  targetDate  DateTime
  milestones  WeightMilestone[]
  bmiTracking Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([userId])
  @@index([targetDate])
}

model WeightMilestone {
  id              String     @id @default(uuid())
  weightGoal      WeightGoal @relation(fields: [weightGoalId], references: [id])
  weightGoalId    String
  milestoneWeight Float
  targetDate      DateTime
  achieved        Boolean    @default(false)
  achievedDate    DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([weightGoalId])
  @@index([targetDate])
}

model ProgressPhoto {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
  photoUrl  String
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([date])
}

model BodyComposition {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  bodyFat      Float?
  muscleMass   Float?
  measurements Json? // For storing various measurements like waist, chest, etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([date])
}

enum TaskStatus {
  PENDING
  COMPLETED
  ARCHIVED
}

enum GoalCategory {
  WEIGHT
  WORKOUTS
  TASKS
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ExerciseCategory {
  STRENGTH
  CARDIO
  FLEXIBILITY
  BALANCE
  FUNCTIONAL
  SPORTS
}

enum MuscleGroup {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  FOREARMS
  CORE
  QUADRICEPS
  HAMSTRINGS
  GLUTES
  CALVES
  FULL_BODY
}

enum ExerciseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RecordType {
  MAX_WEIGHT
  MAX_REPS
  MAX_SETS
  PERSONAL_BEST
  WORKOUT_VOLUME
  EXERCISE_FREQUENCY
}

model Exercise {
  id           String             @id @default(uuid())
  name         String             @unique
  description  String?
  instructions String?
  category     ExerciseCategory
  muscleGroups MuscleGroup[]
  equipment    String[] // Array of equipment needed
  difficulty   ExerciseDifficulty @default(BEGINNER)
  isActive     Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relations
  workoutExercises WorkoutExercise[]
  personalRecords  PersonalRecord[]
  workoutTemplates WorkoutTemplateExercise[]

  @@index([category])
  @@index([muscleGroups])
  @@index([difficulty])
}

model WorkoutTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String // e.g., "Upper Body", "Full Body", "HIIT"
  isPublic    Boolean  @default(false)
  createdBy   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User                      @relation(fields: [createdBy], references: [id])
  exercises WorkoutTemplateExercise[]
  workouts  Workout[]

  @@index([createdBy])
  @@index([isPublic])
  @@index([category])
}

model WorkoutTemplateExercise {
  id                String          @id @default(uuid())
  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id], onDelete: Cascade)
  workoutTemplateId String
  exercise          Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  sets              Int             @default(1)
  reps              Int? // null for cardio/timed exercises
  weight            Float? // null for bodyweight exercises
  duration          Int? // in seconds for cardio exercises
  restTime          Int? // in seconds
  order             Int // order in the workout
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([workoutTemplateId, exerciseId, order])
  @@index([workoutTemplateId])
  @@index([exerciseId])
}

model WorkoutExercise {
  id         String   @id @default(uuid())
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  sets       Int      @default(1)
  reps       Int? // null for cardio/timed exercises
  weight     Float? // null for bodyweight exercises
  duration   Int? // in seconds for cardio exercises
  restTime   Int? // in seconds
  order      Int // order in the workout
  notes      String?
  distance   Float? // in kilometers for cardio exercises
  calories   Int? // estimated calories burned for cardio exercises
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  personalRecords PersonalRecord[]

  @@unique([workoutId, exerciseId, order])
  @@index([workoutId])
  @@index([exerciseId])
}

model PersonalRecord {
  id                String           @id @default(uuid())
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  recordType        RecordType
  value             Float // The record value (weight, reps, etc.)
  date              DateTime
  exercise          Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  workout           Workout?         @relation(fields: [workoutId], references: [id])
  workoutId         String?
  workoutExercise   WorkoutExercise? @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId String?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([userId, recordType, exerciseId, date])
  @@index([userId])
  @@index([recordType])
  @@index([exerciseId])
  @@index([date])
  @@index([workoutId])
  @@index([workoutExerciseId])
}
